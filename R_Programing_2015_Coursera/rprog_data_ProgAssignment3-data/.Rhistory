print(x)
else {
print("BAD")
}}}
add<-function(x,y){
x+y
}
above10<-function(x){
if(x=>10)
print(x)
else
print("BAD")
}
add<-function(x,y){
x+y
}
above10<-function(x){
if(x=>10)
print(x)
}
above10<-function(x){
if(x=>10)
print(x)
}
add<-function(x,y){
x+y
}
above10<-function(x){
use<-x>10
}
X<-list(a=1:5)
X
X<-list(a=1:5, b=rnorm(10))
X<-list(a=1:5, b=rnorm(10))
X
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
spplay(x,mean)
sapply(x,mean)
a<-sapply(x,mean)
a
class(a)
b<-lapply(x,mean)
class(b)
file_list <- dir(directory)
f<-dir()
class(f)
f
f[4]
?paste
gl()
?gl
gl(1,2)
gl(4,2)
x<-list(a=1:5, b=rnorm(10))
b<-lapply(x,mean)
a<-sapply(x,mean)
class(a)
class(b)
traceback
traceback()
## Part 2
complete <- function(directory, id){
## Read them all in at the same time
file_list <- dir(directory)
dat_all <- lapply(file_list[id], function(x)
read.csv(paste(directory, x, sep="/")))
comp <- sapply(dat_all, count_complete)
data.frame(id=id, nobs=comp)
}
count_complete <- function(df)
nrow(na.omit(df))
## Part 3
## Reuse count_complete
corr <- function(directory, threshold){
## Read them all in at the same time
file_list <- dir(directory)
dat_all <- lapply(file_list, function(x)
read.csv(paste(directory, x, sep="/")))
comp <- sapply(dat_all, count_complete)
## above threshold
above_cut <- which(comp > threshold)
## Do correlations across only the elements above the threshold
## Check if any are greater than threshold
if (length(above_cut) != 0){
res <- dat_all[above_cut]
out <- sapply(res, function(x)
cor(x$nitrate, x$sulfate, use="complete.obs"))
return(out)
} else {
return(vector())
}
}
corr(directory = ".",threshold = 0)
traceback()
corr(directory = ".",threshold = 0)
corr(directory = ".",threshold = 0)
library(datasets)
data(iris)
?iris
irir
iris
lapply(iris function(x) mean(iris$Sepal.length))
tapply(iris,INDEX = 3, FUN = mean(iris))
tapply(iris,INDEX = 3, function(x) mean(x))
tapply(iris,INDEX = "virginica", function(x) mean(x))
str(iris)
tapply(iris,"virginica", function(x) mean(x))
tapply(iris,virginica, function(x) mean(x))
tapply(iris,"virginica", mean)
tapply(iris, 3, mean)
tapply(iris, "3", mean)
tapply(iris, c("setosa", "versicolor", "virginica", mean)
)
tapply(iris, c("setosa", "versicolor", "virginica"), mean)
iris
c<-iris[,5]
c
tapply(iris, c, mean)
tapply(iris, "virginica", mean(iris$Sepal.Length))
head(iris)
tapply(iris, 3, mean(iris$Sepal.Length))
tapply(iris, 3, mean(iris[,1]))
iris[,1]
tapply(iris, "virginica", mean(iris[,1]))
tapply(iris, "virginica", mean)
mean(iris)
mean(iris[,1])
mean(iris$Sepal.Length)
tapply(iris,3,mean(iris$Sepal.Length)
)
tapply(iris,3,mean(iris[,1])
)
tapply(iris,3,mean(iris[,1]))
tapply(iris,c,mean(iris[,1]))
tapply(iris,c,function(x) mean(x[,1]))
tapply(iris,"virginica",function(x) mean(x[,1]))
head(iris)
split(iris,f = "Species")
split(iris,"virginica")
split(iris,c)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
head(mtcars)
debug(ls)
ls
ls
debug(ls)
ls
debug(ls)
Q
s
s
tappls
s
taply
Q
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3)+c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
play()
list.files()
nxt()
?list.files
args(list.files)
old.dir<-dir()
old.dir<-getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
file.path(fsep = folder1)
file.path(fsep = "folder1")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3", recursive = TRUE)"testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3", recursive = TRUE)"testdir2", "testdir3")
dir.create("testdir2", "testdir3")
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive = T)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2/", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
setwd("Desktop//Coursera_R_Programing/rprog_data_ProgAssignment3-data/")
source("rankall.R")
rankhospital("TX", "heart failure", 4)
head(rankall("heart attack", 20), 10)
data<-read.csv("outcome-of-care-measures.csv", header = TRUE, stringsAsFactor=FALSE, na.string="Not Available") #reads in data, keeps columns as numeric, and transforms "Not Available" to NAs
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
d<-order(sick$Mortality, sick$hospital, na.last = NA) #order data by outcome, na.last=NA gets rid off the 'NA' so that they are not in the last place and 'worst' works        dd<-sick[d,] #subsets using the ordered/index vector 'd'        s<-as.factor(dd$state) #creates a vector with the states as vectors to splt data by state        w<-split(dd,s) #splits data by state. Now you have 54 lists, one for each state                la
d<-order(sick$Mortality, sick$hospital, na.last = NA) #order data by outcome, na.last=NA gets rid off the 'NA' so that they are not in the last place and 'worst' works        dd<-sick[d,] #subsets using the ordered/index vector 'd'        s<-as.factor(dd$state) #creates a vector with the states as vectors to splt data by state        w<-split(dd,s) #splits data by state. Now you have 54 lists, one for each state                lapply(w,head) #sho
lapply(w,head) #shows the first values of each state
d<-order(sick$Mortality, sick$hospital, na.last = NA) #order data by outcome, na.last=NA gets rid off the 'NA' so that they are not in the last place and 'worst' works
dd<-sick[d,] #subsets using the ordered/index vector 'd'
s<-as.factor(dd$state) #creates a vector with the states as vectors to splt data by state
w<-split(dd,s) #splits data by state. Now you have 54 lists, one for each state
lapply(w,head) #shows the first values of each state
b<-lapply(w, function(x) head(x, n=1))  #shows the first value of each state, which can be used to subset for the 'best' hospital
b
b<-lapply(w, function(x) x[1,])
b
as.data.frame(b)
c<-data.frame()
c<-b
c
b<-lapply(w, function(x) subset(x, subset = [1,])
b<-lapply(w, function(x) subset(x, subset = 1)
)
b<-lapply(w, function(x) subset(x, subset = 1))
b<-lapply(w, function(x) subset(x, select = 1))
b
b<-lapply(w, function(x) subset(x, select = 2))
b
## rankall.R
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
## rankall.R
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
+rankhospital <- function(state, outcome, num) {
+    ## Read outcome data
+    data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
+    data <- data[c(2, 7, 11, 17, 23)]
+    names(data)[1] <- "name"
+    names(data)[2] <- "state"
+    names(data)[3] <- "heart attack"
+    names(data)[4] <- "heart failure"
+    names(data)[5] <- "pneumonia"
+
+    ## Validate the outcome string
+    outcomes = c("heart attack", "heart failure", "pneumonia")
+    if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
+
+    ## Validate the state string
+    states <- data[, 2]
+    states <- unique(states)
+    if( state %in% states == FALSE ) stop("invalid state")
+
+    ## Validate the num value
+    if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
+
+    ## Grab only rows with our state value
+    data <- data[data$state==state & data[outcome] != 'Not Available', ]
+
+    ## Order the data
+    data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
+    data <- data[order(data$name, decreasing = FALSE), ]
+    data <- data[order(data[outcome], decreasing = FALSE), ]
+
+    ## Process the num argument
+    vals <- data[, outcome]
+    if( num == "best" ) {
+        rowNum <- which.min(vals)
+    } else if( num == "worst" ) {
+        rowNum <- which.max(vals)
+    } else {
+        rowNum <- num
+    }
+
+    ## Return hospital name in that state with lowest 30-day death rate
+    data[rowNum, ]$name
+}
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rank_helper <- function(state_subset, outcome_arr, num) {
result <- state_subset[, 2][order(outcome_arr, state_subset[, 2])[num]]
return(result)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
state_arr <- sort(unique(data$State))
arr_len <- length(state_arr)
hospital <- rep("", arr_len)
if (!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
for(i in 1:arr_len) {
# loop for each state
state_subset <- data[data[, 7]==state_arr[i], ]
if(outcome == "heart attack") {
hospital[i] <- num_helper(state_subset, 11, num)
} else if (outcome == "heart failure") {
hospital[i] <- num_helper(state_subset, 17, num)
} else {
hospital[i] <- num_helper(state_subset, 23, num)
}
}
}
# create the data frame to return
df <- data.frame(hospital=hospital, state=state_arr)
result <- df
return(result)
}
# tests
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
state_arr <- sort(unique(data$State))
arr_len <- length(state_arr)
hospital <- rep("", arr_len)
if (!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
for(i in 1:arr_len) {
# loop for each state
state_subset <- data[data[, 7]==state_arr[i], ]
if(outcome == "heart attack") {
hospital[i] <- num_helper(state_subset, 11, num)
} else if (outcome == "heart failure") {
hospital[i] <- num_helper(state_subset, 17, num)
} else {
hospital[i] <- num_helper(state_subset, 23, num)
}
}
}
# create the data frame to return
df <- data.frame(hospital=hospital, state=state_arr)
result <- df
return(result)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
# read the data file
directory <- "outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
state_arr <- sort(unique(data$State))
arr_len <- length(state_arr)
hospital <- rep("", arr_len)
if (!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
for(i in 1:arr_len) {
# loop for each state
state_subset <- data[data[, 7]==state_arr[i], ]
if(outcome == "heart attack") {
hospital[i] <- num_helper(state_subset, 11, num)
} else if (outcome == "heart failure") {
hospital[i] <- num_helper(state_subset, 17, num)
} else {
hospital[i] <- num_helper(state_subset, 23, num)
}
}
}
# create the data frame to return
df <- data.frame(hospital=hospital, state=state_arr)
result <- df
return(result)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
outcome<-"pneumonia"
#Set sickness based on outcome        if(outcome=="heart attack") {                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack        }else if(outcome=="heart failure"){                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure        }else if(outcome=="pneumonia"){                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia        }
if(outcome=="heart attack") {
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
}else if(outcome=="heart failure"){
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}else if(outcome=="pneumonia"){
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
}
data<-read.csv("outcome-of-care-measures.csv", header = TRUE, stringsAsFactor=FALSE, na.string="Not Available") #reads in data, keeps columns as numeric, and transforms "Not Available" to NAs
#Set sickness based on outcome        if(outcome=="heart attack") {                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack        }else if(outcome=="heart failure"){                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure        }else if(outcome=="pneumonia"){                sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)                #sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia        }
if(outcome=="heart attack") {
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
}else if(outcome=="heart failure"){
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}else if(outcome=="pneumonia"){
sick<-data.frame(hospital=data$Hospital.Name, state=data$State, Mortality=data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#sick<-data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
}
head(sick)
d<-order(sick$Mortality, sick$hospital, na.last = NA) #order data by outcome, na.last=NA gets rid off the 'NA' so that they are not in the last place and 'worst' works
dd<-sick[d,] #subsets using the ordered/index vector 'd'
head(dd)
d<-order(sick$Mortality, sick$hospital, na.last = NA) #order data by outcome, na.last=NA gets rid off the 'NA' so that they are not in the last place and 'worst' works
d
dd<-sick[d,] #subsets using the ordered/index vector 'd'
source("submitscript3.R")
submit()
submit()
submit()
submit()
